schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  PRODUCT @join__graph(name: "product", url: "http://localhost:4001/")
  REVIEW @join__graph(name: "review", url: "http://localhost:4002/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: REVIEW)
{
  submitReview(input: ProductReviewInput): SubmitReviewResponse
}

type Product
  @join__type(graph: PRODUCT, key: "id")
  @join__type(graph: REVIEW, key: "id")
{
  id: ID!
  name: String! @join__field(graph: PRODUCT)
  reviews: [Review] @join__field(graph: REVIEW)
  overallRating: Float! @join__field(graph: REVIEW)
}

input ProductReviewInput
  @join__type(graph: REVIEW)
{
  productId: String!
  rating: Int!
}

type Query
  @join__type(graph: PRODUCT)
  @join__type(graph: REVIEW)
{
  products: [Product] @join__field(graph: PRODUCT)
  product(id: ID!): Product @join__field(graph: PRODUCT)
  reviews: [Review] @join__field(graph: REVIEW)
  review(id: ID!): Review @join__field(graph: REVIEW)
}

type Review
  @join__type(graph: REVIEW)
{
  id: ID!
  rating: Int!
  product: Product!
}

type SubmitReviewResponse
  @join__type(graph: REVIEW)
{
  review: Review
}
